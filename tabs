#include <iostream>
#include <memory>
#include <vector>
#include <string>

template <typename T> class Tab {
public:
    std::string name;
    std::string url;
    std::shared_ptr<Tab> next;
    std::shared_ptr<Tab> prev;
    T memory;

    Tab(std::string u, std::string n, T m) {
        url = u;
        name = n;
        memory = m;
        next = nullptr;
        prev = nullptr;
    }
};

template <typename T>
class Browser {
public:
    std::shared_ptr<Tab<T>> curr;
    std::shared_ptr<Tab<T>> head;
    std::shared_ptr<Tab<T>> tail;
    std::vector<std::pair<std::string, std::string>> bookmarks;

    Browser() {
        head = nullptr;
        tail = nullptr;
        curr = nullptr;
    }

    void addNewTab(std::string url, std::string name, T memory) {
        std::shared_ptr<Tab<T>> tab = std::make_shared<Tab<T>>(url, name, memory);
        if (!head) {
            head = tab;
            tail = tab;
        } else {
            tail->next = tab;
            tab->prev = tail;
            tail = tab;
        }
        curr = tail;
    }

    void switchToPrevTab() {
        if (!curr || !curr->prev) {
            std::cout << "There is no previous tabs" << std::endl;
        } else {
            curr = curr->prev;
            std::cout << "Url: " << curr->url << " Name: " << curr->name << " Memory: " << curr->memory << std::endl;
        }
    }

    void switchToNextTab() {
        if (!curr || !curr->next) {
            std::cout << "There is no next tab" << std::endl;
        } else {
            curr = curr->next;
            std::cout << "Url: " << curr->url << " Name: " << curr->name << " Memory: " << curr->memory << std::endl;
        }
    }

void closeCurrentTab() {
    if (!curr) {
        std::cout << "There is no current tab to close right now" << std::endl;
    } else {
        std::shared_ptr<Tab<T>> nextTab = curr->next;
        std::shared_ptr<Tab<T>> prevTab = curr->prev;

        if (curr == head) {
            head = nextTab;
        } else if (curr == tail) {
            tail = prevTab;
        } else {
            prevTab->next = nextTab;
            nextTab->prev = prevTab;
        }

        if (nextTab) {
            curr = nextTab;
        } else {
            curr = prevTab;
        }
        
        if (curr) {
            std::cout << "Current tab is now " << curr->name << std::endl;
        }
    }
}


    void bookmarkCurrent() {
    if (curr) {
        bool isBookmarkPresent = false;
        
        for (const auto& pair : bookmarks) {
            if (pair.first == curr->name && pair.second == curr->url) {
                std::cout << "Bookmark has been added already" << std::endl;
                isBookmarkPresent = true;
                break;
            }
        }

        if (!isBookmarkPresent) {
            bookmarks.push_back({curr->name, curr->url});
        }
    }
}

    void showBookmarkTab() {
        std::cout << "Bookmarks: " << std::endl;
        for (int i = 0; i < bookmarks.size(); ++i) {
        std::cout << bookmarks[i].first << "(" << bookmarks[i].second << ")" << std::endl;
        }
    }

    void moveCurrentToFirst() {
    if (!curr || curr == head) {
        std::cout << "Either current tab is the first tab or their is no current tab" << std::endl;
    } else {
        if (curr->prev) {
            curr->prev->next = curr->next;
        }
        if (curr->next) {
            curr->next->prev = curr->prev;
        }

        if (curr == tail) {
            tail = curr->prev;
            tail->next = nullptr;
        }

        curr->next = head;
        curr->prev = nullptr;
        head->prev = curr;
        head = curr;

        std::cout << "Current tab has been moved to first position" << std::endl;
    }
}

T total_memory() {
        T total = 0;
        std::shared_ptr<Tab<T>> temp = head;
        while (temp) {
            total += temp->memory;
            temp = temp->next;
        }
        std::cout << total << std::endl;
        return total;
    }

    void deleteTab() {
        if (head) {
            std::shared_ptr<Tab<T>> t = head;
            std::shared_ptr<Tab<T>> max_mem = t;

        while (t) {
            if (t->memory > max_mem->memory) {
                max_mem = t;
            }
            t = t->next;
        }

        if (max_mem == head) {
            head = max_mem->next;
        } else if (max_mem == t) {
            t = max_mem->prev;
        } else {
            max_mem->prev->next = max_mem->next;
            max_mem->next->prev = max_mem->prev;
        }

        std::cout << "Url of the deleted tab: " << max_mem->url << " using " << max_mem->memory << " memory" << std::endl;
    }
}

    void display(){
        auto curr = head;
        std::cout<<"Browser tab list = "<<std::endl;
            while(curr){
                std::cout<<"| "<<curr->name<<" x|-->";
                curr = curr->next;
            }
        std::cout<<std::endl;
        std::cout<<std::endl;
    }
};

int main(){
    
    Browser<double> b1;
    b1.addNewTab("https://www.google.com","Google",23.45);
    b1.display();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to Next tab = "<<std::endl;
    b1.switchToNextTab();
    b1.addNewTab("https://www.youtube.com","YouTube",56);
    b1.bookmarkCurrent();
    b1.display();
    b1.addNewTab("https://www.geeksforgeeks.com","GeeksForGeeks",45.78);
    b1.bookmarkCurrent();
    b1.addNewTab("https://chat.openai.com","ChatGPT",129);
    b1.addNewTab("https://linkedin.com","LinkedIn",410);
    b1.bookmarkCurrent();
    b1.addNewTab("https://github.com","Github",110);
    b1.addNewTab("https://kaggle.com","Kaggle",310);
    b1.bookmarkCurrent();
    b1.display();
    std::cout<<"Total memory consumption = "<<b1.total_memory()<<"MB"<<std::endl;
    b1.showBookmarkTab();
    b1.moveCurrentToFirst();
    b1.display();
    b1.deleteTab();
    b1.display();
    std::cout<<"Switch to next tab = "<<std::endl;
    b1.switchToNextTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    b1.closeCurrentTab();
    b1.display();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    b1.closeCurrentTab();
    b1.display();
    b1.showBookmarkTab();
    std::cout<<"Total Memory Consumption = "<<b1.total_memory()<<"MB"<<std::endl;
    b1.deleteTab();
    b1.display();
    b1.addNewTab("https://docs.google.com/","Google Docs",102.34);
    b1.display();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    b1.bookmarkCurrent();
    b1.showBookmarkTab();
    b1.total_memory();
    b1.deleteTab();
    b1.display();
    return 0;
}
