#include<iostream>
#include<string>
#include<vector>
#include <iomanip>
template <typename T> class Item{
    public:
        T name;
        T expiration;
        T category;
        int quantity;
        Item(T n, T e, T c, int q){
            name = n;
            expiration = e;
            category = c;
            quantity = q;
        }
};

template<typename T> class Inventory{
    public:
        std::vector<Item<T>> it;
    void addNewItem(const Item<T>& item){
      int f=0;
        if(it.size() == 0){
            it.push_back(item);
        }
        else
        {
  			for(const auto& curr : it){
             if (curr.name == item.name){
             f=1;
             std::cout<<"Item is already present in inventory"<<std::endl;
           
             }
            }
            if(f==0) {
             it.push_back(item);
                }
                
        }
    }
    void increaseQuantity(const T& itemname, int quantity) {
        for(int i=0;i<it.size();i++){
        if (it[i].name == itemname){
            it[i].quantity = it[i].quantity + quantity;
            }
        }
    }
    void updateItem(const T& itemname, const T& expiration, const T& category, int quantity) {
        int f = 0;
        for(int i=0;i<it.size();i++) {
            if(it[i].name == itemname) {
                it[i].expiration = expiration;
                it[i].category = category;
                it[i].quantity += quantity;
                f++;
            }
        }
        if(f==0) {
            throw "Item not found";
        }
    }
    void removeItem(const T& itemname) {
        int f = 0;
        for(int i=0;i<it.size();i++) {
            if(it[i].name == itemname) {
                it.erase(it.begin()+i);
                f++;
                break;
            }
        }
        if(f==0) {
            throw "Item not found";
        }
    }
    void Total() const {
        int x;
        x = it.size();
        std::cout << "Total size: " << x << std::endl;
    }
    void searchItem(const T& itemname) {
        int f = 0;
        for(int i=0;i<it.size();i++) {
            if(it[i].name == itemname) {
                f++;
            }
        }
        if(f==0) {
            throw "Item not found!!";
        } else {
            std::cout<<"Item found!";
        }
    }
    void displayItems(){
            std::cout<<"-------Inventory-------"<<std::endl;
            std::cout<<std::left<<std::setw(20)<<"Name"<<std::setw(15)<<"Expiration"<<std::setw(15)<<"Quantity"<<std::setw(10)<<"Category"<<std::endl;
            for(int i=0; i<it.size();i++){
                std::cout<<std::left << std::setw(20)<<it[i].name<<std::setw(15)<<it[i].expiration<<std::setw(15)<<it[i].quantity<<std::setw(15)<<it[i].category<<std::endl;
            }
    }
};
template<typename T>class Appointment{
    public: 
        T c_name;
        T ap_date;
        T ap_time;
        T CWID;
        Appointment(T n, T d, T t, T cw){
            c_name = n;
            ap_date = d;
            ap_time = t;
            CWID = cw; 
        }
};
template<typename T>class AppointmentSystem{
        public:
        std::vector<Appointment<T>> ap;
        void schedule(const Appointment<T>& apt){
            for (int i = 0; i<ap.size(); i++){
                 if (ap[i].CWID == apt.CWID) {
                    std::cout << "You have already scheduled an appointment!!!" << std::endl;
                 }
            }
            ap.push_back(apt);
        }
        void Total_appointments(const T& date, const T& time) {
            int f = 0;
            for (int i = 0; i<ap.size(); i++){
                if (ap[i].ap_date == date && ap[i].ap_time == time) {
                 std::cout<< "Total Appointments: " << i<<  " appointment(s) at that day and time." << std::endl;
            f++;
            break;
            }
            
            }
        }
        void removeRecent() {
            ap.pop_back();
        }
        void display(){
            std::cout<<"-------Appointments-------"<<std::endl;
            std::cout<<std::left<<std::setw(20)<<"Name"<<std::setw(15)<<"Date"<<std::setw(15)<<"Time"<<std::setw(15)<<"CWID"<<std::endl;
            for(int i=0; i<ap.size();i++){
                std::cout<<std::left << std::setw(20)<<ap[i].c_name<<std::setw(15)<<ap[i].ap_date<<std::setw(15)<<ap[i].ap_time<<std::setw(15)<<ap[i].CWID<<std::endl;
            }
        }
};
int main(){
    Inventory<std::string> i1;
    Item<std::string> I1("Protien Bar","05/09/2023","Snacks",4);
    i1.addNewItem(I1);
    Item<std::string> I2("Milk","05/12/2023","Regular",2);
    i1.addNewItem(I2);
    Item<std::string> I3("Cerels","09/12/2023","Snacks",5);
    i1.addNewItem(I3);
    i1.displayItems();
    i1.updateItem("Milk","09/24/2023","Regular",3);
    i1.displayItems();
    i1.increaseQuantity("Cerels",10);
    i1.displayItems();
    try{
        i1.updateItem("bar","09/12/2023","Snacks",3);
    }
    catch(const char* msg){
        std::cout <<msg << std::endl;
    }
    i1.displayItems();
    i1.updateItem("Cerels","09/27/2023","Regular",4);
    i1.displayItems();
    i1.Total();
    try{
        i1.removeItem("Bread");
    }
    catch(const char* msg){
        std::cout<<msg<<std::endl;
    }
    try{
        i1.removeItem("Milk");
    }
    catch(const char* msg){
        std::cout<<msg<<std::endl;
    }
    i1.displayItems();
    try{
        i1.searchItem("Cerels");
    }
    catch(const char* msg){
        std::cout<<msg<<std::endl;
    }
    Appointment<std::string> a1("John Bob","09/12/2023","9:30AM","889456723");
    Appointment<std::string> a2("Jim Lee","09/12/2023","10:30AM","883476923");
    Appointment<std::string> a3("Chris Lynn","09/12/2023","12:00PM","879455714");
    Appointment<std::string> a4("Arnav Shah","09/12/2023","12:00PM","879459583");
    AppointmentSystem<std::string> s1;
    s1.schedule(a1);
    s1.schedule(a2);
    s1.schedule(a3);
    s1.schedule(a4);
    s1.display();
    s1.Total_appointments("09/12/2023","12:00PM");
    Appointment<std::string> a5("Chris Lynn","09/12/2023","12:00PM","879455714");
    s1.schedule(a4);
    s1.removeRecent();
    s1.display();
}
